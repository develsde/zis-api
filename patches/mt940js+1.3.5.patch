diff --git a/node_modules/mt940js/lib/parser.js b/node_modules/mt940js/lib/parser.js
index b711db8..78dc9ae 100644
--- a/node_modules/mt940js/lib/parser.js
+++ b/node_modules/mt940js/lib/parser.js
@@ -77,6 +77,7 @@ class Parser {
   * @return {array} Array of statements @see class documentation for details
   */
   parse(data, withTags = false) {
+    data = data.replace(/-NTRF/g, 'NTRF');
     const factory    = new Tags.TagFactory();
     const dataLines  = this._splitAndNormalize(data);
     const tagLines   = [...this._parseLines(dataLines)];
diff --git a/node_modules/mt940js/lib/tags.js b/node_modules/mt940js/lib/tags.js
index 52fa897..df858da 100644
--- a/node_modules/mt940js/lib/tags.js
+++ b/node_modules/mt940js/lib/tags.js
@@ -10,7 +10,7 @@ const helperModels = require('./helperModels');
  */
 class TagFactory {
   /** constructor - Builds tag map */
-  constructor () {
+  constructor() {
     this.tagMap = [
       TagTransactionReferenceNumber,
       TagRelatedReference,
@@ -35,9 +35,9 @@ class TagFactory {
   * @return {Tag} new Tag (specific subclass) instance
   */
   createTag(id, subId, data) {
-    const tagId     = isNaN(id) ? id : Number.parseInt(id, 10);
+    const tagId = isNaN(id) ? id : Number.parseInt(id, 10);
     const fullTagId = tagId.toString() + (subId ? subId.toString() : '');
-    const tagClass  = this.tagMap.get(fullTagId) || this.tagMap.get(tagId);
+    const tagClass = this.tagMap.get(fullTagId) || this.tagMap.get(tagId);
 
     if (!tagClass) { throw new Error(`Unknown tag ${fullTagId}`) }
 
@@ -60,8 +60,8 @@ class Tag {
     if (new.target === Tag) {
       throw new TypeError('Cannot construct Tag instances directly');
     }
-    this.id   = this.constructor.ID;
-    this.re   = this.constructor.PATTERN;
+    this.id = this.constructor.ID;
+    this.re = this.constructor.PATTERN;
     this.data = data;
     this._parse();
   }
@@ -72,6 +72,7 @@ class Tag {
    */
   _parse() {
     const match = this._nextMatch();
+    console.log(match);
     if (!match) { throw Error(`Cannot parse tag ${this.id}: ${this.data}`) }
     this.fields = this._extractFields(match);
   }
@@ -119,8 +120,8 @@ class TagStatementNumber extends Tag {
   _extractFields(match) {
     return {
       statementNumber: match[1],
-      sequenceNumber:  match[3] || '',
-      sectionNumber:   match[5] || ''
+      sequenceNumber: match[3] || '',
+      sectionNumber: match[5] || ''
     };
   }
 }
@@ -138,9 +139,9 @@ class TagNonSwift extends Tag {
 class TagBalance extends Tag {
   static get PATTERN() {
     const re = '^([DC])'                  // DC indicator
-             + '(\\d{2})(\\d{2})(\\d{2})' // Date
-             + '([A-Z]{3})'               // Currency
-             + '([0-9,]{0,16})';          // Amount
+      + '(\\d{2})(\\d{2})(\\d{2})' // Date
+      + '([A-Z]{3})'               // Currency
+      + '([0-9,]{0,16})';          // Amount
     return new RegExp(re);
   }
   constructor(data) {
@@ -168,26 +169,29 @@ class TagStatementLine extends Tag {
   static get ID() { return 61 }
   static get PATTERN() {
     const re = '^(\\d{2})(\\d{2})(\\d{2})' // Date
-             + '((\\d{2})(\\d{2}))?'      // Entry date
-             + '(R?[DC])([A-Z])?'         // DC indicator + funds code
-             + '([0-9,]{0,16})'           // Amount
-             + '([A-Z][A-Z0-9]{3})'       // Transaction type
-             + '([^/\\n]{0,16})'          // Customer reference
-             + '(//(.{0,16}))?'           // Bank reference
-             + '(\\n(.{0,34}))?';         // Extra
+      + '((\\d{2})(\\d{2}))?'      // Entry date
+      + '(R?[DC])([A-Z])?'         // DC indicator + funds code
+      + '([0-9,]{0,16})'           // Amount
+      + '([A-Z][A-Z0-9,-]{3})'       // Transaction type
+      + '([^/\\n]{0,16})'          // Customer reference
+      + '(//(.{0,16}))?'           // Bank reference
+      + '(\\n(.{0,34}))?';         // Extra
     return new RegExp(re);
   }
   _extractFields(match) {
+    const transactionTypes = match[10] && match[10].includes('-NTRF')
+      ? match[10].replace('-NTRF', 'NTRF')
+      : match[10];
     return {
-      date:            helperModels.Date.parse(match[1], match[2], match[3]),
-      entryDate:       match[4] && helperModels.Date.parse(match[1], match[5], match[6]) || '',
-      fundsCode:       match[8] || '',
-      amount:          helperModels.Amount.parse(match[7], match[9]),
-      isReversal:      match[7][0] === 'R',
-      transactionType: match[10],
-      reference:       match[11],
-      bankReference:   match[13] || '',
-      extraDetails:    match[15] || ''
+      date: helperModels.Date.parse(match[1], match[2], match[3]),
+      entryDate: match[4] && helperModels.Date.parse(match[1], match[5], match[6]) || '',
+      fundsCode: match[8] || '',
+      amount: helperModels.Amount.parse(match[7], match[9]),
+      isReversal: match[7][0] === 'R',
+      transactionType: transactionTypes || '',
+      reference: match[11],
+      bankReference: match[13] || '',
+      extraDetails: match[15] || ''
     };
   }
 }
